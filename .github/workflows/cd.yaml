name: CD
on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  deploy_frontend:
    runs-on: self-hosted

    steps:
      - name: SSH to Frontend EC2 and Deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.FRONTEND_EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.FRONTEND_EC2_SSH_KEY }}
          port: 22
          script: |
            # Check if Docker and NGINX are installed
            if ! command -v docker &>/dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc
              sudo chmod a+r /etc/apt/keyrings/docker.asc
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] \
              https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
              sudo systemctl enable docker --now
            fi

            if ! command -v nginx &>/dev/null; then
              echo "Installing NGINX..."
              sudo apt-get update && sudo apt-get install -y nginx
              sudo systemctl enable nginx --now
            fi

            # Clone or pull latest frontend code
            cd /home/ubuntu
            [ ! -d "frontend" ] && git clone https://github.com/bigstan00/project-mern frontend || (cd frontend && git pull)
            cd frontend

            # Deploy frontend using Docker Compose
            docker compose down || echo "No running containers to stop"
            docker compose up -d --build || { echo "Failed to start containers"; exit 1; }

            docker ps

  deploy_backend:
    runs-on: self-hosted

    steps:
      - name: SSH to Backend EC2 via Bastion and Deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ubuntu
          key: ${{ secrets.BASTION_SSH_KEY }}
          port: 22
          script: |
            ssh -o StrictHostKeyChecking=no -i ${{ secrets.BACKEND_SSH_KEY }} ubuntu@${{ secrets.BACKEND_PRIVATE_IP }} << 'EOF'
              # Check if Docker and NGINX are installed
              if ! command -v docker &>/dev/null; then
                echo "Installing Docker..."
                sudo apt-get update && sudo apt-get install -y ca-certificates curl gnupg
                sudo install -m 0755 -d /etc/apt/keyrings
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc
                sudo chmod a+r /etc/apt/keyrings/docker.asc
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] \
                https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                sudo apt-get update && sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
                sudo systemctl enable docker --now
              fi

              if ! command -v nginx &>/dev/null; then
                echo "Installing NGINX..."
                sudo apt-get update && sudo apt-get install -y nginx
                sudo systemctl enable nginx --now
              fi

              # Clone or pull the latest backend code
              cd /home/ubuntu
              [ ! -d "backend" ] && git clone https://github.com/bigstan00/project-mern backend || (cd backend && git pull)
              cd backend

              # Deploy backend using Docker Compose
              docker compose down || echo "No running containers to stop"
              docker compose up -d --build || { echo "Failed to start containers"; exit 1; }

              # Configure cron job for auto-scaling
              CRON_JOB="*/5 * * * * /home/ubuntu/backend/scale.sh >> /home/ubuntu/cron.log 2>&1"
              (crontab -l 2>/dev/null | grep -Fxq "$CRON_JOB") || (crontab -l 2>/dev/null; echo "$CRON_JOB") | crontab -

              # Verify running containers and cron job
              docker ps
              crontab -l
            EOF

  associate_elastic_ip:
    runs-on: ubuntu-latest
    needs: [deploy_frontend]
    steps:
      - name: Allocate and Associate Elastic IP
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=mern-server-frontend" \
            --query "Reservations[*].Instances[*].InstanceId" --output text)
          if [ -z "$INSTANCE_ID" ]; then echo "Error: Unable to find instance" && exit 1; fi

          CURRENT_IP=$(aws ec2 describe-addresses --filters "Name=instance-id,Values=$INSTANCE_ID" \
            --query "Addresses[*].PublicIp" --output text)
          if [ -n "$CURRENT_IP" ]; then
            echo "Elastic IP already associated: $CURRENT_IP"
            echo "::set-output name=elastic_ip::$CURRENT_IP"
            exit 0
          fi

          ALLOC_ID=$(aws ec2 allocate-address --domain vpc --output text --query AllocationId)
          aws ec2 associate-address --instance-id "$INSTANCE_ID" --allocation-id "$ALLOC_ID"
          ELASTIC_IP=$(aws ec2 describe-addresses --allocation-ids "$ALLOC_ID" --query Addresses[0].PublicIp --output text)
          echo "::set-output name=elastic_ip::$ELASTIC_IP"

      - name: Update Route 53 Record
        run: |
          ELASTIC_IP="${{ steps.allocate_elastic_ip.outputs.elastic_ip }}"
          cat <<EOF > route53.json
          {
            "Comment": "Update record to reflect new Elastic IP",
            "Changes": [{
              "Action": "UPSERT",
              "ResourceRecordSet": {
                "Name": "${{ secrets.AWS_DOMAIN_NAME }}",
                "Type": "A",
                "TTL": 300,
                "ResourceRecords": [{ "Value": "$ELASTIC_IP" }]
              }
            }]
          }
          EOF
          aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.AWS_HOSTED_ZONE_ID }} --change-batch file://route53.json
