name: CD
on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  deploy_application:
    runs-on: self-hosted
    steps:
      - name: SSH to EC2 and Deploy
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.FRONTEND_EC2_HOST }}  # Update with the correct EC2 instance IP
          username: ubuntu
          key: ${{ secrets.FRONTEND_EC2_SSH_KEY }}
          port: 22
          script: |
            # Check if Docker is installed
            if ! command -v docker &>/dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
              sudo chmod a+r /etc/apt/keyrings/docker.asc
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] \
              https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
              sudo systemctl enable docker --now
            fi
            # Add the current user to the Docker group
            CURRENT_USER=$(whoami)
            echo "Adding '$CURRENT_USER' to the Docker group..."
            sudo usermod -aG docker $CURRENT_USER
            # Install NGINX
            echo "Installing NGINX..."
            sudo apt-get update
            sudo apt-get install -y nginx
            sudo systemctl enable nginx --now
            echo "NGINX installed successfully."
            # Check and configure NGINX for Frontend (only if not already configured)
            NGINX_FRONTEND_CONFIG="/etc/nginx/sites-available/frontend"
            if [ ! -f "$NGINX_FRONTEND_CONFIG" ]; then
              echo "Configuring NGINX for Frontend..."
              sudo bash -c "cat > $NGINX_FRONTEND_CONFIG" << 'EOL'
              server {
                  listen 80;
                  server_name bstan00.xyz;  # Your domain name
                  location / {
                      root /home/ubuntu/frontend;  # Update this to your frontend build directory
                      index index.html;  # Default file
                      try_files $uri $uri/ /index.html;  # For single-page applications
                  }
                  error_page 404 /404.html;  # Optional: Custom 404 page
                  location = /404.html {
                      internal;
                  }
              }
            EOL
              sudo ln -s $NGINX_FRONTEND_CONFIG /etc/nginx/sites-enabled/
              sudo nginx -t && sudo systemctl restart nginx
              echo "Frontend NGINX configuration done."
            else
              echo "Frontend NGINX configuration already exists."
            fi
            # Check and configure NGINX for Backend (only if not already configured)
            NGINX_BACKEND_CONFIG="/etc/nginx/sites-available/backend"
            if [ ! -f "$NGINX_BACKEND_CONFIG" ]; then
              echo "Configuring NGINX for Backend..."
              sudo bash -c "cat > $NGINX_BACKEND_CONFIG" << 'EOL'
              server {
                  listen 80;
                  server_name bstan00.xyz;  # Your domain name
                  # Allow traffic only from the frontend IP or your trusted source
                  allow 10.0.7.5;  # Replace with your frontend's IP address
                  deny all;
                  location /api/ {
                      proxy_pass http://localhost:3500;  # Backend running on port 5000
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade \$http_upgrade;
                      proxy_set_header Connection 'upgrade';
                      proxy_set_header Host \$host;
                      proxy_cache_bypass \$http_upgrade;
                  }
                  error_page 502 /502.html;
                  location = /502.html {
                      internal;
                  }
              }
            EOL
              sudo ln -s $NGINX_BACKEND_CONFIG /etc/nginx/sites-enabled/
              sudo nginx -t && sudo systemctl restart nginx
              echo "Backend NGINX configuration done."
            else
              echo "Backend NGINX configuration already exists."
            fi
            cd /home/ubuntu
            # Clone or pull the latest project code
            if [ ! -d "/home/ubuntu/project-mern" ]; then
              git clone https://github.com/bigstan00/project-mern
            else
              cd /home/ubuntu/project-mern && git fetch && git pull
            fi
            # Navigate to the project directory
            cd /home/ubuntu/project-mern
            # Stop and remove any running containers
            sudo docker compose down
            # Build and start containers in detached mode
            sudo docker compose up -d --build
            # Configure cron job for auto-scaling (only if it doesn't already exist)
            CRON_JOB="*/5 * * * * /home/ubuntu/backend/scale.sh >> /home/ubuntu/cron.log 2>&1"
            if ! crontab -l | grep -Fxq "$CRON_JOB"; then
              (crontab -l 2>/dev/null; echo "$CRON_JOB") | crontab -
              echo "Cron job for scaling added."
            else
              echo "Cron job for scaling already exists."
            fi
            # Verify running containers and cron job
            sudo docker ps
            crontab -l  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Allocate and Associate Elastic IP
        id: allocate_eip
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=mern-server-frontend" \
            --query "Reservations[*].Instances[*].InstanceId" --output text)
          if [ -z "$INSTANCE_ID" ]; then
            echo "Error: Unable to find instance." && exit 1
          fi
          CURRENT_IP=$(aws ec2 describe-addresses \
            --filters "Name=instance-id,Values=$INSTANCE_ID" \
            --query "Addresses[*].PublicIp" --output text)
          if [ -n "$CURRENT_IP" ]; then
            echo "Elastic IP already associated: $CURRENT_IP"
            echo "::set-output name=elastic_ip::$CURRENT_IP"
            exit 0
          fi
          echo "Allocating a new Elastic IP..."
          aws ec2 allocate-address --domain vpc --region us-east-2 --output json > eip.json
          ELASTIC_IP=$(jq -r '.PublicIp' eip.json)
          ALLOC_ID=$(jq -r '.AllocationId' eip.json)
          aws ec2 associate-address --instance-id $INSTANCE_ID --allocation-id $ALLOC_ID --region us-east-2
          echo "::set-output name=elastic_ip::$ELASTIC_IP"
      - name: Validate Elastic IP
        run: |
          ELASTIC_IP="${{ steps.allocate_eip.outputs.elastic_ip }}"
          echo "Elastic IP to be used: $ELASTIC_IP"
          if [[ -z "$ELASTIC_IP" || ! "$ELASTIC_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid Elastic IP: '$ELASTIC_IP'" && exit 1
          fi
      - name: Update Route 53 Record
        run: |
          ELASTIC_IP="${{ steps.allocate_eip.outputs.elastic_ip }}"
          cat << EOF > route53.json
          {
            "Comment": "Update record to reflect new Elastic IP",
            "Changes": [{
              "Action": "UPSERT",
              "ResourceRecordSet": {
                "Name": "${{ secrets.AWS_DOMAIN_NAME }}",
                "Type": "A",
                "TTL": 300,
                "ResourceRecords": [{ "Value": "$ELASTIC_IP" }]
              }
            }]
          }
          EOF
          aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.AWS_HOSTED_ZONE_ID }} \
            --change-batch file://route53.json
      - name: Verify Route 53 Record Update
        run: |
          nslookup ${{ secrets.AWS_DOMAIN_NAME }} || exit 1
          echo "Route 53 record successfully updated with IP: $ELASTIC_IP"