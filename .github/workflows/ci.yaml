name: CI Pipeline

on:  
  push:  # Trigger on push events to the master branch
    branches:
      - master  # Adjust to your main branch (e.g., main or master)
  pull_request:  # Trigger on pull requests targeting the master branch
    branches:
      - master

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Frontend Image
        run: |
          cd frontend
          docker build -t frontend:1 .

      - name: Push Frontend Image to Docker Hub
        run: |
          docker tag frontend:1 bigstan00/frontend:1
          docker push bigstan00/frontend:1

      - name: Build Backend Image
        run: |
          cd backend
          docker build -t backend:1 .

      - name: Push Backend Image to Docker Hub
        run: |
          docker tag backend:1 bigstan00/backend:1
          docker push bigstan00/backend:1

      - name: Verify images
        run: |
          docker images

      - name: Run Docker Compose Locally
        run: |
          docker compose down --remove-orphans  # Ensure no conflicting containers
          docker compose up -d  # Start the entire stack

      - name: Verify Containers Are Running
        run: |
          docker ps

      - name: Check Prometheus Targets
        run: |
          curl -f http://localhost:9090/targets || exit 1  # Validate Prometheus is scraping

      - name: Check Alertmanager
        run: |
          curl -f http://localhost:9093 || exit 1

      - name: Check NGINX Configuration
        run: |
          docker exec nginx-cont nginx -t  # Validate NGINX config

      - name: Check Node Exporter
        run: |
          curl -f http://localhost:9100 || exit 1

      - name: SSH to EC2 and Deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Install Docker and Docker Compose
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl

            # Add Docker's official GPG key
            sudo install -m 0755 -d /etc/apt/keyrings
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            sudo chmod a+r /etc/apt/keyrings/docker.asc

            # Add Docker repository to sources
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] \
            https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

            # Enable Docker and add user to the Docker group
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo usermod -aG docker $USER

            # Clone or pull the latest project code
            if [ ! -d "/home/ubuntu/project-mern" ]; then
              git clone https://github.com/bigstan00/project-mern
            else
              cd /home/ubuntu/project-mern && git pull
            fi

            # Navigate to the project directory
            cd /home/ubuntu/project-mern

            # Stop any running containers
            docker compose down

            # Build and start containers in detached mode
            docker compose up -d --build

            # Verify the running containers
            docker ps

            # Test frontend and backend services
            wget -qO- http://localhost:3000 || exit 1
            wget -qO- http://localhost:3500 || exit 1  # Backend check

          debug: true  # Enable debug logs
