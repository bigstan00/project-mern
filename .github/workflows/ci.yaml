# name: Local CI Pipeline

# on:  
#   push:  # Trigger on push events to the master branch
#     branches:
#       - master  # Adjust to your main branch (e.g., main or master)
#   pull_request:  # Trigger on pull requests targeting the master branch
#     branches:
#       - master

# jobs:
#   build-and-test:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1

#       - name: Cache Docker layers
#         uses: actions/cache@v2
#         with:
#           path: /tmp/.buildx-cache
#           key: ${{ runner.os }}-buildx-${{ github.sha }}
#           restore-keys: |
#             ${{ runner.os }}-buildx-

#       - name: Build Frontend Image
#         run: |
#           cd frontend
#           docker build -t frontend:1 .

#       - name: Build Backend Image
#         run: |
#           cd backend
#           docker build -t backend:1 .
#       - name: Verify images
#         run: |
#           docker images

#       - name: Run Docker Compose Locally
#         run: |
#           docker compose down --remove-orphans  # Ensure no conflicting containers
#           docker compose up -d  # Start the entire stack

#       - name: Verify Containers Are Running
#         run: |
#           docker ps

#       - name: Check Prometheus Targets
#         run: |
#           curl -f http://localhost:9090/targets || exit 1  # Validate Prometheus is scraping

#       - name: Check Alertmanager
#         run: |
#           curl -f http://localhost:9093 || exit 1

#       - name: Check NGINX Configuration
#         run: |
#           docker exec nginx-cont nginx -t  # Validate NGINX config

#       - name: Check Node Exporter
#         run: |
#           curl -f http://localhost:9100 || exit 1

#   push-to-docker:
#     runs-on: ubuntu-latest
#     needs: build-and-test  # This job depends on successful build-and-test

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Log into Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_TOKEN }}

#       - name: Push Frontend Image to Docker Hub
#         run: |
#           docker tag frontend:1 bigstan00/frontend:1
#           docker push bigstan00/frontend:1

#       - name: Push Backend Image to Docker Hub
#         run: |
#           docker tag backend:1 bigstan00/backend:1
#           docker push bigstan00/backend:1


name: CI Pipeline

on:  
  push:  # Trigger on push events to the master branch
    branches:
      - master  # Adjust to your main branch (e.g., main or master)
  pull_request:  # Trigger on pull requests targeting the master branch
    branches:
      - master

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Frontend Image
        run: |
          cd frontend
          docker build -t frontend:1 .

      - name: Push Frontend Image to Docker Hub
        run: |
          docker tag frontend:1 bigstan00/frontend:1
          docker push bigstan00/frontend:1

      - name: Build Backend Image
        run: |
          cd backend
          docker build -t backend:1 .

      - name: Push Backend Image to Docker Hub
        run: |
          docker tag backend:1 bigstan00/backend:1
          docker push bigstan00/backend:1

      - name: Verify images
        run: |
          docker images

      - name: Run Docker Compose Locally
        run: |
          docker compose down --remove-orphans  # Ensure no conflicting containers
          docker compose up -d  # Start the entire stack

      - name: Verify Containers Are Running
        run: |
          docker ps

      - name: Check Prometheus Targets
        run: |
          curl -f http://localhost:9090/targets || exit 1  # Validate Prometheus is scraping

      - name: Check Alertmanager
        run: |
          curl -f http://localhost:9093 || exit 1

      - name: Check NGINX Configuration
        run: |
          docker exec nginx-cont nginx -t  # Validate NGINX config

      - name: Check Node Exporter
        run: |
          curl -f http://localhost:9100 || exit 1
      
      - name: Verify Application is Running
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker ps  # Check running containers
            curl -f http://localhost:3000 || exit 1  # Check frontend
            curl -f http://localhost:3500 || exit 1  # Check backend